//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.ResultPageViewModelSampleDataSampleDataSource
{
	using System; 
	using System.ComponentModel;

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class ResultPageViewModel { }
#else

	public class ResultPageViewModel : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		public ResultPageViewModel()
		{
			try
			{
				Uri resourceUri = new Uri("/_Tecmosa;component/SampleData/ResultPageViewModelSampleDataSampleDataSource/ResultPageViewModelSampleDataSampleDataSource.xaml", UriKind.RelativeOrAbsolute);
				System.Windows.Application.LoadComponent(this, resourceUri);
			}
			catch
			{
			}
		}

		private TestPointViewModelCollection _TestPoints = new TestPointViewModelCollection();

		public TestPointViewModelCollection TestPoints
		{
			get
			{
				return this._TestPoints;
			}
		}
	}

	public class TestPointViewModel : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private ResultViewModelCollection _Results = new ResultViewModelCollection();

		public ResultViewModelCollection Results
		{
			get
			{
				return this._Results;
			}
		}
	}

	public class ResultViewModel : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private bool _HasMax = false;

		public bool HasMax
		{
			get
			{
				return this._HasMax;
			}

			set
			{
				if (this._HasMax != value)
				{
					this._HasMax = value;
					this.OnPropertyChanged("HasMax");
				}
			}
		}

		private bool _HasMin = false;

		public bool HasMin
		{
			get
			{
				return this._HasMin;
			}

			set
			{
				if (this._HasMin != value)
				{
					this._HasMin = value;
					this.OnPropertyChanged("HasMin");
				}
			}
		}

		private bool _HasSigma = false;

		public bool HasSigma
		{
			get
			{
				return this._HasSigma;
			}

			set
			{
				if (this._HasSigma != value)
				{
					this._HasSigma = value;
					this.OnPropertyChanged("HasSigma");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private double _Value = 0;

		public double Value
		{
			get
			{
				return this._Value;
			}

			set
			{
				if (this._Value != value)
				{
					this._Value = value;
					this.OnPropertyChanged("Value");
				}
			}
		}

		private double _SigmaValue = 0;

		public double SigmaValue
		{
			get
			{
				return this._SigmaValue;
			}

			set
			{
				if (this._SigmaValue != value)
				{
					this._SigmaValue = value;
					this.OnPropertyChanged("SigmaValue");
				}
			}
		}

		private double _MaxValue = 0;

		public double MaxValue
		{
			get
			{
				return this._MaxValue;
			}

			set
			{
				if (this._MaxValue != value)
				{
					this._MaxValue = value;
					this.OnPropertyChanged("MaxValue");
				}
			}
		}

		private double _MinValue = 0;

		public double MinValue
		{
			get
			{
				return this._MinValue;
			}

			set
			{
				if (this._MinValue != value)
				{
					this._MinValue = value;
					this.OnPropertyChanged("MinValue");
				}
			}
		}
	}

	public class TestPointViewModelCollection : System.Collections.ObjectModel.ObservableCollection<TestPointViewModel>
	{ 
	}

	public class ResultViewModelCollection : System.Collections.ObjectModel.ObservableCollection<ResultViewModel>
	{ 
	}
#endif
}
